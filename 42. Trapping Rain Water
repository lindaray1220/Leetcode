# 42. Trapping Rain Water
# Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.
# Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
# Output: 6
# Explanation: The above elevation map (black section) is represeclass Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        def could_place(row, col):
            return not (cols[col] + hill_diagonals[row - col] + dale_diagonals[row + col])
        
        def place_queen(row, col):
            queens.add((row, col))
            cols[col] = 1
            hill_diagonals[row - col] = 1
            dale_diagonals[row + col] = 1
        
        def remove_queen(row, col):
            queens.remove((row, col))
            cols[col] = 0
            hill_diagonals[row - col] = 0
            dale_diagonals[row + col] = 0
        
        def add_solution():
            solution = []
            for _, col in sorted(queens):
                solution.append('.' * col + 'Q' + '.' * (n - col - 1))
            output.append(solution)
        
        def backtrack(row = 0):
            for col in range(n):
                if could_place(row, col):
                    place_queen(row, col)
                    if row + 1 == n:
                        add_solution()
                    else:
                        backtrack(row + 1)
                    remove_queen(row, col)
        
        cols = [0] * n
        hill_diagonals = [0] * (2 * n - 1)
        dale_diagonals = [0] * (2 * n - 1)
        queens = set()
        output = []
        backtrack()
        return outputnted by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
# Example 2:

# Input: height = [4,2,0,3,2,5]
# Output: 9
 

# Constraints:

# n == height.length
# 0 <= n <= 3 * 104
# 0 <= height[i] <= 105

class Solution(object):
  def trapWater(self, A):
    """
    input: int[] A
    return: int
    """
    # write your solution here
    if len(A) == 0:
      return 0
    print('A: ', A)
    l = [0 for _ in range(len(A))]
    r = [0 for _ in range(len(A))]
    l[0] = A[0]
    for i in range(1, len(A)):
      l[i] = max(A[i], l[i-1])
    print('l: ', l)
    r[len(A)-1] = A[-1]
    for j in range(len(A)-2, -1, -1):
      r[j] = max(A[j], r[j+1])
    print('r: ', r)
    cnt = 0
    for k in range(len(A)):
      cnt += min(l[k], r[k]) - A[k]
    return cnt

#Time: O(N), Space: O(2N)

    # if len(A) == 0:
    #   return 0
    # l, r = 0, len(A)-1
    # l_max, r_max = A[0], A[-1]
    # cnt = 0
    # while l <= r:
    #   if l_max <= r_max:
    #     cnt += max(min(l_max, r_max) - A[l], 0)
    #     l_max = max(l_max, A[l])
    #     l += 1
    #   else:
    #     cnt += max(min(l_max, r_max) - A[r], 0)
    #     r_max = max(r_max, A[r])
    #     r -= 1   
    # return cnt  
#Time: O(N), Space: O(1)

s = Solution()
print(s.trapWater([0,1,0,2,1,0,1,3,2,1,2,1]))

s = Solution()
print(s.trapWater([4,2,0,3,2,5]))
