# 5. Longest Palindromic Substring

# Given a string s, return the longest palindromic substring in s.

# Example 1:

# Input: s = "babad"
# Output: "bab"
# Note: "aba" is also a valid answer.
# Example 2:

# Input: s = "cbbd"
# Output: "bb"
# Example 3:

# Input: s = "a"
# Output: "a"
# Example 4:

# Input: s = "ac"
# Output: "a"

# Constraints:

# 1 <= s.length <= 1000
# s consist of only digits and English letters (lower-case and/or upper-case),

Solution 1: Expand around center
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if len(s) <= 1:
            return s
        start, end = 0, 0
        for i in range(len(s)):
            len1 = self.explore(s, i, i)
            len2 = self.explore(s, i, i+1)
            len_ = max(len1, len2)
            if len_ > end - start:
                start = i - (len_-1)/2
                end = i + len_/2
        return s[start:end+1]
    
    def explore(self, strr, l, r):
        while l >=0 and r < len(strr) and strr[l] == strr[r]:
            l -= 1
            r += 1
        return r-l-1

#O(N**2)/ O(1)

Solution 2: DP
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if len(s) <= 1:
            return s
        N = len(s)
        dp = [[False]*N for _ in range(N)]
        max_length = 1
        max_pal_sub_str = s[0]
        
        for i in range(N):
            dp[i][i] = True
        
        for i in range(N-1):
            if s[i] == s[i+1]:
                dp[i][i+1] = True
                max_length = 2
                max_pal_sub_str = s[i:i+2]
        
        for d in range(2, N):
            for i in range(0, N - d):
                j = i + d
                if s[i] == s[j] and dp[i+1][j-1] == True:
                    dp[i][j] = True
                    max_length = j - i + 1
                    max_pal_sub_str = s[i:j+1]
        
        return max_pal_sub_str
#O(N**2)/ O(N**2)
