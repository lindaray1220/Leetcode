# 5. Longest Palindromic Substring

# Given a string s, return the longest palindromic substring in s.

# Example 1:

# Input: s = "babad"
# Output: "bab"
# Note: "aba" is also a valid answer.
# Example 2:

# Input: s = "cbbd"
# Output: "bb"
# Example 3:

# Input: s = "a"
# Output: "a"
# Example 4:

# Input: s = "ac"
# Output: "a"

# Constraints:

# 1 <= s.length <= 1000
# s consist of only digits and English letters (lower-case and/or upper-case),

class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if len(s) <= 1:
            return s
        start, end = 0, 0
        for i in range(len(s)):
            len1 = self.explore(s, i, i)
            len2 = self.explore(s, i, i+1)
            len_ = max(len1, len2)
            if len_ > end - start:
                start = i - (len_-1)/2
                end = i + len_/2
        return s[start:end+1]
    
    def explore(self, strr, l, r):
        while l >=0 and r < len(strr) and strr[l] == strr[r]:
            l -= 1
            r += 1
        return r-l-1

#O(N**2)/ O(1)
