# 767. Reorganize String

# Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.

# Return any possible rearrangement of s or return "" if not possible.

# Example 1:

# Input: s = "aab"
# Output: "aba"
# Example 2:

# Input: s = "aaab"
# Output: ""
 
# Constraints:
# 1 <= s.length <= 500
# s consists of lowercase English letters.

class Solution(object):
    def reorganizeString(self, s):
        """
        :type s: str
        :rtype: str
        """
        import collections
        import heapq
        pq = [(-cnt, ch) for ch, cnt in collections.Counter(s).items()]
        heapq.heapify(pq)
        if -pq[0][0] > (len(s)+1) / 2: return ""
            
        ans = []
        while len(pq) >= 2:
            nct1, ch1 = heapq.heappop(pq)
            nct2, ch2 = heapq.heappop(pq)
            ans.extend([ch1, ch2])
            if nct1 != -1: heapq.heappush(pq, (nct1 + 1, ch1))
            if nct2 != -1: heapq.heappush(pq, (nct2 + 1, ch2))
        return ''.join(ans)+(pq[0][1] if pq else '')

s = Solution
print(s.reorganizeString('aab'))
print(s.reorganizeString('aaab'))
print(s.reorganizeString('aaabc'))
