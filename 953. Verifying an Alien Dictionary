# 953. Verifying an Alien Dictionary

# In an alien language, surprisingly they also use english lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.

# Given a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographicaly in this alien language.

# Example 1:
# Input: words = ["hello","leetcode"], order = "hlabcdefgijkmnopqrstuvwxyz"
# Output: true
# Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted.

# Example 2:
# Input: words = ["word","world","row"], order = "worldabcefghijkmnpqstuvxyz"
# Output: false
# Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.

# Example 3:
# Input: words = ["apple","app"], order = "abcdefghijklmnopqrstuvwxyz"
# Output: false
# Explanation: The first three characters "app" match, and the second string is shorter (in size.) According to lexicographical rules "apple" > "app", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (More info).

# Constraints:

# 1 <= words.length <= 100
# 1 <= words[i].length <= 20
# order.length == 26
# All characters in words[i] and order are English lowercase letters.



class Solution(object):
    def isAlienSorted(self, words, order):
        """
        :type words: List[str]
        :type order: str
        :rtype: bool
        """
        order = {letter: idx for idx, letter in enumerate(order)}
        print('order: ', order)
        def lex_order(w1, w2):
          for c1, c2 in zip(w1, w2):
            print('c1: ', c1)
            print('c2: ', c2)  
            # if order.index(c1) < order.index(c2):
            #   return True
            # if order.index(c1) > order.index(c2):
            #   return False
            if order[c1] < order[c2]:
              return True
            if order[c1] > order[c2]:
              return False
            return len(w1) <= len(w2)
        
        for w1, w2 in zip(words, words[1:]):
          print('w1: ', w1)
          print('w2: ', w2)
          if not lex_order(w1, w2):
            return False
        return True

s = Solution()
print(s.isAlienSorted(["apple","app"], "abcdefghijklmnopqrstuvwxyz"))

print(s.isAlienSorted(["word","world","row", "roww"], "worldabcefghijkmnpqstuvxyz"))
