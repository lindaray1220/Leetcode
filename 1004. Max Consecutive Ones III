1004. Max Consecutive Ones III

Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
 
Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length

class Solution(object):
    def longestOnes(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        l = 0
        zeros = 0
        for r in range(len(nums)):
            if nums[r] == 0:
                zeros += 1
            if zeros > k:
                zeros -= 1 - nums[l]
                l += 1
        return r - l + 1
        
#O(N)/O(1)

class Solution(object):
    def longestOnes(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        l, r = 0, 0
        zeros = 0
        res = 0
        while r < len(nums):
            if zeros < k:
                # if nums[r] == 0:
                #     zeros += 1
                zeros += 1 - nums[r]
                r += 1
            elif nums[r] == 1:
                r += 1
            else:
                zeros -= 1 - nums[l]
                l += 1
            res = max(res, r-l)
        return res
        
#O(2*N)/O(1)
