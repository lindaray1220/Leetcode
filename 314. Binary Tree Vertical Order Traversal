# 314. Binary Tree Vertical Order Traversal

# Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).

# If two nodes are in the same row and column, the order should be from left to right.

# Examples:

# Given binary tree [3,9,20,null,null,15,7],

#    3
#   /\
#  /  \
#  9  20
#     /\
#    /  \
#   15   7
# return its vertical order traversal as:

# [
#   [9],
#   [3,15],
#   [20],
#   [7]
# ]
# Given binary tree [3,9,8,4,0,1,7],

#      3
#     /\
#    /  \
#    9   8
#   /\  /\
#  /  \/  \
#  4  01   7
# return its vertical order traversal as:

# [
#   [4],
#   [9],
#   [3,0,1],
#   [8],
#   [7]
# ]
# Given binary tree [3,9,8,4,0,1,7,null,null,null,2,5] (0's right child is 2 and 1's left child is 5),

#      3
#     /\
#    /  \
#    9   8
#   /\  /\
#  /  \/  \
#  4  01   7
#     /\
#    /  \
#    5   2
# return its vertical order traversal as:

# [
#   [4],
#   [9,5],
#   [3,0,1],
#   [8,2],
#   [7]
# ]

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
import collections
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root):
      res = []
      if root is None:
        return res
      cols = collections.defaultdict(list)
      queue = [(root, 0)]
      for node, i in queue:
        if node:
          cols[i].append(node.val)
          queue += (node.left, i-1), (node.right, i+1)
      #return [cols[i] for i in range(min(cols.keys()), max(cols.keys())+1)] if cols else []
      for i in range(min(cols.keys()), max(cols.keys())+1):
        res.extend(cols[i])
      return res

#O(N) / O(N)

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:
        if not root:
            return []
        cols = collections.defaultdict(list)
        def dfs(node, x, y):
            cols[x].append((y, node.val))
            if node.left:
                dfs(node.left, x-1, y+1)
            if node.right:
                dfs(node.right, x+1, y+1)      
        dfs(root, 0, 0)
        return [[t[1] for t in sorted(cols[x], key=lambda t: t[0])] for x in sorted(cols)]           


时间复杂度是O(N + N*(N*log(N) + N))。第一个N是DFS要把每个节点进行遍历一次；for循环有层N，循环里面有层排序是NlogN，遍历是N）。

空间复杂度是O(N)。

# Time:  O(n)
# Space: O(n)
