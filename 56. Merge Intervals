# 56. Merge Intervals

# Given a set of time intervals in any order, return the total length of the area covered by those intervals.

# Assumptions:

# The given array of intervals is not null.
# None of the intervals in the array is null.
# Examples:

# {<1,3>, <2,4>, <5,7>, <6,8> }. The total length returned is 6(<1,4> is covered and <5,8> is covered).

class Solution:
  def Merge_Intervals(self, intervals):
    res = []
    intervals.sort()
    s, e = intervals[0][0], intervals[0][1]
    for arr in intervals:
      if arr[0] > e:
        res.append((s, e))
        s, e = [arr[0], arr[1]]
      else:
        e = max(e, arr[1])
    res.append((s, e))
    return res        


class Solution(object):
    def merge(self, intervals):
        """
        :type intervals: List[List[int]]
        :rtype: List[List[int]]
        """
        if not intervals or len(intervals)==0:
            return []
        intervals.sort(key=lambda t:t[0])
        res = []
        for interval in intervals:
            if len(res) == 0 or interval[0] > res[-1][1]:
                res.append(interval)
            else:
                res[-1][1] = max(res[-1][1], interval[1])
        return res
        
s = Solution()
print(s.Merge_Intervals([[1,3], [2,4], [5,7], [6,8]]))
print(s.Merge_Intervals([[1,3], [2,2], [2,3], [6,8]]))
