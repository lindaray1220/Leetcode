# 76. Minimum Window Substring

# Given two strings s and t, return the minimum window in s which will contain all the characters in t. If there is no such window in s that covers all characters in t, return the empty string "".

# Note that If there is such a window, it is guaranteed that there will always be only one unique minimum window in s.

 

# Example 1:

# Input: s = "ADOBECODEBANC", t = "ABC"
# Output: "BANC"
# Example 2:

# Input: s = "a", t = "a"
# Output: "a"
 

# Constraints:

# 1 <= s.length, t.length <= 105
# s and t consist of English letters.
 

# Follow up: Could you find an algorithm that runs in O(n) time?

class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        import collections
        dic = collections.Counter(t)
        if not s or not t or len(s) < len(t):
            return ''
        res = ''
        slw = 0
        fst = 0
        match = 0
        min_len = len(s)+1
        while fst <len(s):
            letter = s[fst]
            fst += 1
            if letter in dic:
                dic[letter] -= 1
                if dic[letter] == 0:
                    match += 1
                    while match == len(dic):
                        if fst - slw < min_len:
                            res = s[slw:fst]
                            min_len = fst - slw
                        tmp = s[slw]
                        slw += 1
                        if tmp in dic:
                            dic[tmp] += 1
                            if dic [tmp] == 1:
                                match -= 1
        return res if min_len < len(s)+1 else ''
