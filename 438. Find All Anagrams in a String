# 438. Find All Anagrams in a String

# Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

# Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

# The order of output does not matter.

# Example 1:

# Input:
# s: "cbaebabacd" p: "abc"

# Output:
# [0, 6]

# Explanation:
# The substring with start index = 0 is "cba", which is an anagram of "abc".
# The substring with start index = 6 is "bac", which is an anagram of "abc".
# Example 2:

# Input:
# s: "abab" p: "ab"

# Output:
# [0, 1, 2]

# Explanation:
# The substring with start index = 0 is "ab", which is an anagram of "ab".
# The substring with start index = 1 is "ba", which is an anagram of "ab".
# The substring with start index = 2 is "ab", which is an anagram of "ab".

class Solution(object):
    def findAnagrams(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: List[int]
        """
        if not s or len(s) < len(p):
            return []
        dic = collections.Counter(p)
        matches = 0
        res = []
        for i in range(len(s)):
            word = s[i]
            if word in dic:
                dic[word] -= 1
                if dic[word] == 0:
                    matches += 1
            if i >= len(p):
                tmp = s[i-len(p)]
                if tmp in dic:
                    dic[tmp] += 1
                    if dic[tmp] == 1:
                        matches -= 1
            if matches == len(dic):
                res.append(i-len(p)+1)
        return res
#O(N) / O(M)
