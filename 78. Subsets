# 78. Subsets

# Given an integer array nums of unique elements, return all possible subsets (the power set).

# The solution set must not contain duplicate subsets. Return the solution in any order.

# Example 1:

# Input: nums = [1,2,3]
# Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
# Example 2:

# Input: nums = [0]
# Output: [[],[0]]
 
# Constraints:

# 1 <= nums.length <= 10
# -10 <= nums[i] <= 10
# All the numbers of nums are unique.

class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if not nums:
            return []
        res = []
        self.dfs(nums, res, [], 0)
        return res
    
    def dfs(self, nums, res, tmp, idx):
        if idx == len(nums):
            res.append(tmp[:])
            return
        tmp.append(nums[idx])
        self.dfs(nums, res, tmp, idx+1)
        tmp.pop()
        self.dfs(nums, res, tmp, idx+1)
