# 632. Smallest Range Covering Elements from K Lists

# You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.

# We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

# Example 1:

# Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
# Output: [20,24]
# Explanation: 
# List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
# List 2: [0, 9, 12, 20], 20 is in range [20,24].
# List 3: [5, 18, 22, 30], 22 is in range [20,24].
# Example 2:

# Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
# Output: [1,1]
# Example 3:

# Input: nums = [[10,10],[11,11]]
# Output: [10,11]
# Example 4:

# Input: nums = [[10],[11]]
# Output: [10,11]
# Example 5:

# Input: nums = [[1],[2],[3],[4],[5],[6],[7]]
# Output: [1,7]
 
# Constraints:

# nums.length == k
# 1 <= k <= 3500
# 1 <= nums[i].length <= 50
# -105 <= nums[i][j] <= 105
# nums[i] is sorted in non-decreasing order.
class Solution(object):
    def smallestRange(self, nums):
        """
        :type nums: List[List[int]]
        :rtype: List[int]
        """
        if not nums:
            return []
        max_val = float('-inf')
        heap = []
        for i in range(len(nums)):
            if nums[i]:
                heap.append((nums[i][0], i, 0))
                max_val = max(max_val, nums[i][0])
        import heapq
        heapq.heapify(heap)
        Next = [float('-inf'), float('inf')]
        while len(heap) == len(nums):
            min_val, ind_arr, ind_elem = heapq.heappop(heap)
            if max_val - min_val < Next[1] - Next[0]:
                Next = [min_val, max_val]
            if ind_elem + 1 < len(nums[ind_arr]):
                heapq.heappush(heap, (nums[ind_arr][ind_elem+1], ind_arr, ind_elem+1))
                max_val = max(max_val, nums[ind_arr][ind_elem+1])
        return Next
#O(n*logk) / O(k)                
