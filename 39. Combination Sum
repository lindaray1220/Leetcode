# 39. Combination Sum

# Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

# The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

# It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

# Example 1:

# Input: candidates = [2,3,6,7], target = 7
# Output: [[2,2,3],[7]]
# Explanation:
# 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
# 7 is a candidate, and 7 = 7.
# These are the only two combinations.
# Example 2:

# Input: candidates = [2,3,5], target = 8
# Output: [[2,2,2,2],[2,3,3],[3,5]]
# Example 3:

# Input: candidates = [2], target = 1
# Output: []
# Example 4:

# Input: candidates = [1], target = 1
# Output: [[1]]
# Example 5:

# Input: candidates = [1], target = 2
# Output: [[1,1]]
 
# Constraints:

# 1 <= candidates.length <= 30
# 1 <= candidates[i] <= 200
# All elements of candidates are distinct.
# 1 <= target <= 500

class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        if not candidates:
            return []   
        unique = {}
        candidates = list(set(candidates))
        res = []
        self.helper(candidates, target, unique, res)
        return res

    def helper(self, candidates, target, unique, res, i = 0, current = []):
        if target == 0:
            tmp = [x for x in current]
            tmp1 = tmp
            tmp.sort()
            tmp = tuple(tmp)
            if tmp not in unique:
                res.append(tmp1)
                unique[tmp] = 1
            return
        if target < 0:
            return
        for x in range(i, len(candidates)):
            current.append(candidates[x])
            self.helper(candidates, target-candidates[x], unique, res, i, current)
            current.pop(len(current)-1)

# This algorithm has time complexity O((n+k)!) where n is the size of candidates,
# and k is the max repeated times for each candidates
# space complexity O(m) where m is the size of array for the solution.

class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        ans = []
        def driver(temp, current, total):

	        if total == target:
		        ans.append(temp)
	        elif total > target:
		        temp.pop(-1)
	        else:
		        for i in range(current, len(candidates)):
			        c = candidates[i]
			        driver(temp+[c], i, total+c)

        for i in range(len(candidates)):
	        c = candidates[i]
	        driver([c], i, c)
        return ans

class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        candidates.sort()
        return self.dfs(candidates, target)
    
    def dfs(self, can, target):
        arr = []
        if target == 0:
            return [[]]

        for i, v in enumerate(can):
            if v <= target:
                tmp = self.dfs(can[i:], target - v)
                arr.extend( list(map(lambda x: x + [v], tmp)))

        return arr
        
class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        from collections import defaultdict
        # store all combinations according to their sum
        cache = defaultdict(list)
        
        for c in candidates:
            if c > target:
                continue
            
            # store candidate
            cache[c].append([c])
            
            # get the combinations of all values that candidate can add to and be < target
            for i in range(1, target-c+1):
                seen_list = cache[i]
                for seen in seen_list:
                    # store new combinations
                    cache[c+i].append(seen+[c])  
    
        # return combinations that add to target value            
        return cache[target]
#Python Easiest approach using dp

class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        self.res = []
        def dfs(candidates, target, idx, curr):
            if target < 0:
                return
            if target == 0:
                self.res.append(curr[:])
                return
            for i in range(idx, len(candidates)):
                dfs(candidates, target-candidates[i], i, curr+[candidates[i]])
        dfs(candidates, target, 0, [])
        return self.res
