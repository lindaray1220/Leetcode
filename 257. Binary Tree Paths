# 257. Binary Tree Paths

# Given the root of a binary tree, return all root-to-leaf paths in any order.

# A leaf is a node with no children.

# Example 1:

# Input: root = [1,2,3,null,5]
# Output: ["1->2->5","1->3"]
# Example 2:

# Input: root = [1]
# Output: ["1"]
 
# Constraints:

# The number of nodes in the tree is in the range [1, 100].
# -100 <= Node.val <= 100

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def binaryTreePaths(self, root):
        """
        :type root: TreeNode
        :rtype: List[str]
        """
        self.res = []
        if not root:
            return []
        stack = [(root, '')]
        while stack:
            node, strr = stack.pop()
            if not node.left and not node.right:
                self.res.append(strr+str(node.val))
            if node.right:
                stack.append((node.right, strr+str(node.val)+'->'))
            if node.left:
                stack.append((node.left, strr+str(node.val)+'->'))
        return self.res
 #O(N) / O(h)
