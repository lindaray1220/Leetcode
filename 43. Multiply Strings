# 43. Multiply Strings

# Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

# Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.
 
# Example 1:

# Input: num1 = "2", num2 = "3"
# Output: "6"
# Example 2:

# Input: num1 = "123", num2 = "456"
# Output: "56088"
 
# Constraints:

# 1 <= num1.length, num2.length <= 200
# num1 and num2 consist of digits only.
# Both num1 and num2 do not contain any leading zero, except the number 0 itself.

class Solution(object):
    def multiply(self, num1, num2):
        """
        :type num1: str
        :type num2: str
        :rtype: str
        """
        if num1 == '0' or num2 == '0':
            return '0'
        res = [0]*(len(num1)+len(num2))
        for i in range(len(num1)-1, -1, -1):
            for j in range(len(num2)-1, -1, -1):
                sum_ = 0
                pos1 = i + j
                pos2 = i + j + 1
                sum_ = int(num1[i])*int(num2[j]) + res[pos1]*10 + res[pos2]
                res[pos1] = sum_//10
                res[pos2] = sum_%10
        while res[0] == 0:
            res = res[1:]
        return ''.join(str(x) for x in res)
# O(M*N) / O(M+N)
# https://www.youtube.com/watch?v=kY7SI207GAk&t=180s
