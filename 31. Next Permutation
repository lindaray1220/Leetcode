# 31. Next Permutation

# Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

# If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).

# The replacement must be in place and use only constant extra memory.

 

# Example 1:

# Input: nums = [1,2,3]
# Output: [1,3,2]
# Example 2:

# Input: nums = [3,2,1]
# Output: [1,2,3]
# Example 3:

# Input: nums = [1,1,5]
# Output: [1,5,1]
# Example 4:

# Input: nums = [1]
# Output: [1]
 

# Constraints:

# 1 <= nums.length <= 100
# 0 <= nums[i] <= 100

class Solution(object):
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: None Do not return anything, modify nums in-place instead.
        """
        def swap(i, j):
            while i < j:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
                j -= 1

        n = len(nums)
        index = n - 2
        while index > -1 and nums[index] >= nums[index + 1]:
            index -= 1
        if index == -1:
            swap(0, n - 1)
            return
        i = n - 1
        while i > index and nums[i] <= nums[index]:
            i -= 1
        nums[i], nums[index] = nums[index], nums[i]
        swap(index + 1, n - 1)
        

s = Solution()
print(s.nextPermutation([2, 3, 1]))
print(s.nextPermutation([1, 2, 3]))
print(s.nextPermutation([1, 3, 2]))
print(s.nextPermutation([1]))
print(s.nextPermutation([3, 2, 1]))
