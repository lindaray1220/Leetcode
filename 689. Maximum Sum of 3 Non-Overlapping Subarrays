# 689. Maximum Sum of 3 Non-Overlapping Subarrays

# Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.

# Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.

# Example 1:

# Input: nums = [1,2,1,2,6,7,5,1], k = 2
# Output: [0,3,5]
# Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].
# We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.
# Example 2:

# Input: nums = [1,2,1,2,1,2,1,2,1], k = 2
# Output: [0,2,4]
 
# Constraints:
# 1 <= nums.length <= 2 * 104
# 1 <= nums[i] < 216
# 1 <= k <= floor(nums.length / 3)

class Solution(object):
    def maxSumOfThreeSubarrays(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        bestOneInd = 0
        bestTwoInd = [0, k]
        bestThreeInd = [0, k, k*2]
        
        MaxOneTotalSum = sum(nums[:k])
        MaxTwoTotalSum = sum(nums[:k*2])
        MaxThreeTotalSum = sum(nums[:k*3])
        
        CurOneSum = sum(nums[:k])
        CurTwoSum = sum(nums[k:k*2])
        CurThreeSum = sum(nums[k*2:k*3])
        
        for i in range(1, len(nums)-k*3+1):
            CurOneSum = CurOneSum - nums[i-1] + nums[i-1+k]
            CurTwoSum = CurTwoSum - nums[i-1+k] + nums[i-1+k*2]
            CurThreeSum = CurThreeSum - nums[i-1+k*2] + nums[i-1+k*3]
            
            if CurOneSum > MaxOneTotalSum:
                bestOneInd = i
                MaxOneTotalSum = CurOneSum                      

            if CurTwoSum + MaxOneTotalSum > MaxTwoTotalSum:
                bestTwoInd = [bestOneInd, i+k]
                MaxTwoTotalSum = CurTwoSum + MaxOneTotalSum  
                                        
            if CurThreeSum + MaxTwoTotalSum > MaxThreeTotalSum:
                bestThreeInd = bestTwoInd + [i+k*2]
                MaxThreeTotalSum = CurThreeSum + MaxTwoTotalSum
        
        return bestThreeInd

s = Solution
print(s.maxSumOfThreeSubarrays([1,2,1,2,6,7,5,1], 2))
print(s.maxSumOfThreeSubarrays([1,2,1,2,1,2,1,2,1], 2))

# O(N) / O(1)
