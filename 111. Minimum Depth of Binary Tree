# 111. Minimum Depth of Binary Tree

# Given a binary tree, find its minimum depth.

# The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

# Note: A leaf is a node with no children.

 

# Example 1:
# Input: root = [3,9,20,null,null,15,7]
# Output: 2
# Example 2:

# Input: root = [2,null,3,null,4,null,5,null,6]
# Output: 5
 

# Constraints:

# The number of nodes in the tree is in the range [0, 105].
# -1000 <= Node.val <= 1000
# Definition for a binary tree node.

class TreeNode(object):
   def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

root = TreeNode(4)  
root.left = TreeNode(2)  
root.left.left = TreeNode(1)  
root.left.right = TreeNode(3)  
root.right = TreeNode(6) 
root.right.left = TreeNode(5)  
root.right.right = TreeNode(7)  

class Solution(object):
    def minDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """

# # Recursive Solution
#         if root is None:
#           return 0
#         if root.left and root.right:
#           return min(self.minDepth(root.left), self.minDepth(root.right)) + 1
#         else:
#           return max(self.minDepth(root.left), self.minDepth(root.right)) + 1

        if root is None:
          return 0

  # Leaf node reached.
        if root.left is None and root.right is None:
          return 1

  # Current node has only right subtree.
        if not root.left:
          return 1 + self.minDepth(root.right)
  
  # Current node has only left subtree.
        elif not root.right:
          return 1 + self.minDepth(root.left)
  
  # if none of the above cases, then recur on both left and right subtrees.
        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))

#Time: O(N)

s = Solution()
print(s.minDepth(root))

# Level Order Traversal.
class Solution(object):
  def minDepth(self, root):
    """
    :type root: TreeNode
    :rtype: int
    """
    if root == None:
      return 0
  
  # Initialize a list to be used a queue with the root.
    q = []
    q.append({'node': root, 'depth': 1})

  # Level order traversal algorithm:
    while (len(q)):
    # Get the node at the front of the queue.
      queueItem = q.pop(0) 

    # Retreive the data that the node had 
      node = queueItem['node'] 
      depth = queueItem['depth'] 

    # If this is the first leaf node encountered,
    # return its depth and terminate the algorithm.
      if node.left == None and node.right == None:  
        return depth  
      
    # If left subtree exists, add it to queue 
      if not node.left == None: 
        q.append({'node' : node.left , 'depth' : depth + 1}) 

    # if right subtree exists, add it to queue 
      if not node.right == None:   
        q.append({'node': node.right , 'depth' : depth + 1}) 


    if root == None:
      return 0
    q = [(root, 1)]
    while q:
      node, depth = q.pop(0)
      if not node.left and not node.right:
        return depth
      if node.left:
        q.append((node.left, depth+1))
      if node.right:
        q.append((node.right, depth+1))
