1192. Critical Connections in a Network

There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some servers unable to reach some other server.

Return all critical connections in the network in any order.

 

Example 1:


Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
Example 2:

Input: n = 2, connections = [[0,1]]
Output: [[0,1]]
 

Constraints:

2 <= n <= 105
n - 1 <= connections.length <= 105
0 <= ai, bi <= n - 1
ai != bi
There are no repeated connections.
class Solution(object):
    def criticalConnections(self, n, connections):
        """
        :type n: int
        :type connections: List[List[int]]
        :rtype: List[List[int]]
        """
        import collections
        g = collections.defaultdict(set)
        for u, v in connections:
            g[u].add(v)
            g[v].add(u)
        jump = [-1]*n
        #starting form the current node, explore all the noe connection to this node except fpr its parent, and return the minimum value node.
        def dfs(v, par, lvl, jump, res, g):
            jump[v] = lvl + 1
            for child in g[v]:
                if child == par:
                    continue
                elif jump[child] == -1:
                    jump[v] = min(dfs(child, v, lvl+1, jump, res, g),  jump[v])
                else:
                    jump[v] = min(jump[v], jump[child])
            if jump[v] == lvl + 1 and v != 0:
                res.append([par, v])
            return jump[v]
        
        res = []
        dfs(0, -1, 0, jump, res, g)
        return res
 #O(N)/O(N)  
