# Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), find the minimum number of conference rooms required.

# For example,
# Given [[0, 30],[5, 10],[15, 20]],
# return 2.

class Solution(object):
  def minMeetingRooms(self, intervals):
    """
    input: int[][] intervals
    return: int
    """
    # write your solution here
    import heapq
    size = len(intervals)
    if size<=1: return size
    heap = []
    for interval in sorted(intervals):
      if heap and interval[0]>=heap[0]:
        heapq.heappushpop(heap,interval[1])
      else:
        heapq.heappush(heap,interval[1])
    return len(heap)

s = Solution()
print(s.minMeetingRooms([[0, 30],[5, 10],[15, 20], [40,50]]))
#Time: O(NlogN), Space: O(N)
