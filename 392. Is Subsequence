# 392. Is Subsequence

# Given two strings s and t, check if s is a subsequence of t.

# A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 

# Example 1:

# Input: s = "abc", t = "ahbgdc"
# Output: true
# Example 2:

# Input: s = "axc", t = "ahbgdc"
# Output: false
 

# Constraints:

# 0 <= s.length <= 100
# 0 <= t.length <= 104
# s and t consist only of lowercase English letters.
 

# Follow up: If there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?

# https://maxming0.github.io/2020/06/09/Is-Subsequence/
# The isBadVersion API is already defined for you.
# @param version, an integer
# @return a bool
# def isBadVersion(version):

# class Solution(object):
#     def isSubsequence(self, s, t):
#         """
#         :type s: str
#         :type t: str
#         :rtype: bool
#         """
#         i, j = 0, 0
#         while i < len(s) and j < len(t):
#             if s[i] == t[j]:
#                 i += 1
#             j += 1
#         return i == len(s)

    # axc
    # ahbgdc
    # i=0, j=0; i=1, j=......
    # abc
    # ahbgdc
    # i=0, j=0; i=1, j=3; i=2, j=5; i=3, j=6
import collections
class Solution(object):
    def isSubsequence(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        dic = collections.defaultdict(list)
        for i, c in enumerate(t):
            dic[c].append(i)
        
        cur = -1
        for c in s:
            if c not in dic:
                return False
            l = dic[c]
            p = bisect.bisect_left(l, cur)
            if p == len(l):
                return False
            cur = l[p] + 1
        return True    
s = Solution()

print(s.isSubsequence("axc","ahbgdc"))
