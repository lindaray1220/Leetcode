# 47. Permutations II

# Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

# Example 1:

# Input: nums = [1,1,2]
# Output:
# [[1,1,2],
#  [1,2,1],
#  [2,1,1]]
# Example 2:

# Input: nums = [1,2,3]
# Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

# Constraints:

# 1 <= nums.length <= 8
# -10 <= nums[i] <= 10
class Solution(object):
    def permuteUnique(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        self.res = []
        self.used = [False]*len(nums)
        def dfs(nums, tmp):
          if len(tmp) == len(nums):
            self.res.append(tmp[:])
            return
          for i in range(len(nums)):
            if self.used[i]: continue
            if i > 0 and nums[i] == nums[i-1] and self.used[i-1]: continue
            self.used[i] = True
            tmp.append(nums[i])
            dfs(nums, tmp)
            self.used[i] = False
            tmp.pop()
        dfs(sorted(nums), [])
        return self.res

s = Solution()
print(s.permuteUnique([1,2,2,3]))

class Solution(object):
    def permuteUnique(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """

        if not nums:
            return []
    
        res = []
        nums.sort()
        self.helper(nums, res, 0)
        return res
    
    def helper(self, nums, res, index):
        if index == len(nums) - 1:
            res.append(nums[:])
            return
        s = set()
        for i in range(index, len(nums)):
            if nums[i] in s:
                continue
            nums[index], nums[i] = nums[i], nums[index]
            s.add(nums[index])
            self.helper(nums, res, index + 1)
            nums[index], nums[i] = nums[i], nums[index]
