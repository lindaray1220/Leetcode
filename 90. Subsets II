# 90. Subsets II

# Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

# The solution set must not contain duplicate subsets. Return the solution in any order.

# Example 1:

# Input: nums = [1,2,2]
# Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
# Example 2:

# Input: nums = [0]
# Output: [[],[0]]

# Constraints:

# 1 <= nums.length <= 10
# -10 <= nums[i] <= 10

class Solution(object):
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if not nums:
            return []
        res = []
        nums.sort()
        self.dfs(nums, res, [], 0)
        return res
    
    def dfs(self, nums, res, tmp, idx):
        if idx == len(nums):
            res.append(tmp[:])
            return
        tmp.append(nums[idx])
        self.dfs(nums, res, tmp, idx+1)
        Next = idx+1
        tmp.pop()
        while Next < len(nums) and nums[Next] == nums[idx]:
            Next += 1
        self.dfs(nums, res, tmp, Next)
        
