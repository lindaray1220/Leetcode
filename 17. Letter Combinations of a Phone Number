# 17. Letter Combinations of a Phone Number

# Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

# A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

# Example 1:

# Input: digits = "23"
# Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
# Example 2:

# Input: digits = ""
# Output: []
# Example 3:

# Input: digits = "2"
# Output: ["a","b","c"]
 
# Constraints:

# 0 <= digits.length <= 4
# digits[i] is a digit in the range ['2', '9'].

class Solution(object):
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        self.dict = {"0": ' ',
                     "1": ' ',
                     "2":"abc",
                     "3":"def",
                     "4":"ghi",
                     "5":"jkl",
                     "6":"mno",
                     "7":"pqrs",
                     "8":"tuv",
                     "9":"wxyz"}
        if not digits:
            return []
        self.res = []
        def dfs(tmp, idx):
            if len(tmp) == len(digits):
                self.res.append(''.join(tmp))
                return
            for p in self.dict[digits[idx]]:
                tmp.append(p)
                dfs(tmp, idx+1)
                tmp.pop()
        dfs([], 0)
        return self.res
