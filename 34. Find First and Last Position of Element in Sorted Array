# 34. Find First and Last Position of Element in Sorted Array

# Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

# If target is not found in the array, return [-1, -1].

# Follow up: Could you write an algorithm with O(log n) runtime complexity?

# Example 1:

# Input: nums = [5,7,7,8,8,10], target = 8
# Output: [3,4]
# Example 2:

# Input: nums = [5,7,7,8,8,10], target = 6
# Output: [-1,-1]
# Example 3:

# Input: nums = [], target = 0
# Output: [-1,-1]

# Constraints:

# 0 <= nums.length <= 105
# -109 <= nums[i] <= 109
# nums is a non-decreasing array.
# -109 <= target <= 109
class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        if not nums or self.R_search(nums, target) == -1:
            return [-1, -1]
        return [self.L_search(nums, target), self.R_search(nums, target)]
    
    def L_search(self, nums, target):
        l, r = 0, len(nums)-1
        while l < r - 1:
            m = l + (r-l)/2
            if nums[m] < target:
                l = m
            else:
                r = m
        if nums[l] == target:
            return l
        if nums[r] == target:
            return r
        return -1

    def R_search(self, nums, target):
        l, r = 0, len(nums)-1
        while l < r - 1:
            m = l + (r-l)/2
            if nums[m] > target:
                r = m
            else:
                l = m
        if nums[r] == target:
            return r
        if nums[l] == target:
            return l
        return -1
