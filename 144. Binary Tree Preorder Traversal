# 144. Binary Tree Preorder Traversal

# Given the root of a binary tree, return the preorder traversal of its nodes' values.

# Example 1:

# Input: root = [1,null,2,3]
# Output: [1,2,3]
# Example 2:

# Input: root = []
# Output: []
# Example 3:

# Input: root = [1]
# Output: [1]
# Example 4:

# Input: root = [1,2]
# Output: [1,2]
# Example 5:

# Input: root = [1,null,2]
# Output: [1,2]
 
# Constraints:

# The number of nodes in the tree is in the range [0, 100].
# -100 <= Node.val <= 100
 
# Follow up: Recursive solution is trivial, could you do it iteratively?
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        self.helper(root, res)
        return res
    
    def helper(self, node, res):
        if not node:
            return
        res.append(node.val) 
        self.helper(node.left, res)
        self.helper(node.right, res)
         
#O(N)/O(h)    

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []
        stack = [(root, 1)]
        res = []
        while stack:
            node, cnt = stack.pop()
            if cnt == 1:
                stack.append((node, cnt+1))
                res.append(node.val)
                if node.left:
                    stack.append((node.left, 1))
            if cnt == 2:
                if node.right:
                    stack.append((node.right, 1))      
        return res     

#O(N)/O(h)     
